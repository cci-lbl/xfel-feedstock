{% set version = "2022.9.26" %}

package:
  name: cctbx.xfel
  version: {{ version }}

source:
  url: https://artprodcus3.artifacts.visualstudio.com/Ae7d56bcd-6398-4fef-808d-577536b26a95/61b2f770-c205-438f-9953-5597b5ea835b/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2NjdGJ4LXJlbGVhc2UvcHJvamVjdElkLzYxYjJmNzcwLWMyMDUtNDM4Zi05OTUzLTU1OTdiNWVhODM1Yi9idWlsZElkLzQyOTgvYXJ0aWZhY3ROYW1lL3hmZWxfbW9kdWxlcw2/content?format=file&subPath=%2Fxfel_source.tar  # [unix]
  url: https://artprodcus3.artifacts.visualstudio.com/Ae7d56bcd-6398-4fef-808d-577536b26a95/61b2f770-c205-438f-9953-5597b5ea835b/_apis/artifact/cGlwZWxpbmVhcnRpZmFjdDovL2NjdGJ4LXJlbGVhc2UvcHJvamVjdElkLzYxYjJmNzcwLWMyMDUtNDM4Zi05OTUzLTU1OTdiNWVhODM1Yi9idWlsZElkLzQyOTgvYXJ0aWZhY3ROYW1lL3hmZWxfbW9kdWxlcw2/content?format=file&subPath=/xfel_source.tar  # [win]
  patches:
    # - cbf.patch
    # - dxtbx.patch
    - libtbx_osx-arm64.patch  # [build_platform != target_platform]
    - libtbx_SConscript.patch

build:
  number: 0
  osx_is_app: True
  skip: True  # [py!=39]
  preserve_egg_dir: true
  entry_points:
    # dials
    - cluster.dials.exec = dials.command_line.cluster_exec:run
    - dev.dials.csv = dials.command_line.rl_csv:run
    - dev.dials.show_extensions = dials.command_line.show_extensions:run
    - dev.dials.ssx_index = dials.command_line.ssx_index:run
    - dev.dials.ssx_integrate = dials.command_line.ssx_integrate:run
    - dials.align_crystal = dials.command_line.align_crystal:run
    - dials.anvil_correction = dials.command_line.anvil_correction:run
    - dials.apply_mask = dials.command_line.apply_mask:run
    - dials.assign_experiment_identifiers = dials.command_line.assign_experiment_identifiers:run
    - dials.augment_spots = dials.command_line.augment_spots:run
    - dials.background = dials.command_line.background:run
    - dials.check_indexing_symmetry = dials.command_line.check_indexing_symmetry:run
    - dials.cluster_unit_cell = dials.command_line.cluster_unit_cell:run
    - dials.combine_experiments = dials.command_line.combine_experiments:run
    - dials.compare_orientation_matrices = dials.command_line.compare_orientation_matrices:run
    - dials.complete_full_sphere = dials.command_line.complete_full_sphere:run
    - dials.compute_delta_cchalf = dials.command_line.compute_delta_cchalf:run
    - dials.convert_to_cbf = dials.command_line.convert_to_cbf:run
    - dials.cosym = dials.command_line.cosym:run
    - dials.create_profile_model = dials.command_line.create_profile_model:run
    - dials.damage_analysis = dials.command_line.damage_analysis:run
    - dials.detect_blanks = dials.command_line.detect_blanks:run
    - dials.estimate_gain = dials.command_line.estimate_gain:run
    - dials.estimate_resolution = dials.command_line.estimate_resolution:run
    - dials.export = dials.command_line.export:run
    - dials.export_best = dials.command_line.export_best:run
    - dials.export_bitmaps = dials.command_line.export_bitmaps:run
    - dials.filter_reflections = dials.command_line.filter_reflections:run
    - dials.find_bad_pixels = dials.command_line.find_bad_pixels:run
    - dials.find_hot_pixels = dials.command_line.find_hot_pixels:run
    - dials.find_rotation_axis = dials.command_line.find_rotation_axis:run
    - dials.find_shared_models = dials.command_line.find_shared_models:run
    - dials.find_spots = dials.command_line.find_spots:run
    - dials.find_spots_client = dials.command_line.find_spots_client:run
    - dials.find_spots_server = dials.command_line.find_spots_server:run
    - dials.frame_orientations = dials.command_line.frame_orientations:run
    - dials.generate_distortion_maps = dials.command_line.generate_distortion_maps:run
    - dials.generate_mask = dials.command_line.generate_mask:run
    - dials.geometry_viewer = dials.command_line.geometry_viewer:run
    - dials.goniometer_calibration = dials.command_line.goniometer_calibration:run
    - dials.image_viewer = dials.command_line.image_viewer:run
    - dials.import = dials.command_line.dials_import:run
    - dials.import_xds = dials.command_line.import_xds:run
    - dials.index = dials.command_line.index:run
    - dials.indexed_as_integrated = dials.command_line.indexed_as_integrated:run
    - dials.integrate = dials.command_line.integrate:run
    - dials.merge = dials.command_line.merge:run
    - dials.merge_cbf = dials.command_line.merge_cbf:run
    - dials.merge_reflection_lists = dials.command_line.merge_reflection_lists:run
    - dials.missing_reflections = dials.command_line.missing_reflections:run
    - dials.model_background = dials.command_line.model_background:run
    - dials.modify_geometry = dials.command_line.modify_geometry:run
    - dials.plot_Fo_vs_Fc = dials.command_line.plot_Fo_vs_Fc:run
    - dials.plot_reflections = dials.command_line.plot_reflections:run
    - dials.plot_scan_varying_model = dials.command_line.plot_scan_varying_model:run
    - dials.plugins = dials.command_line.plugins:run
    - dials.powder_calibrate = dials.command_line.powder_calibrate:run
    - dials.predict = dials.command_line.predict:run
    - dials.rbs = dials.command_line.refine_bravais_settings:run
    - dials.reciprocal_lattice_viewer = dials.command_line.reciprocal_lattice_viewer:run
    - dials.reference_profile_viewer = dials.command_line.reference_profile_viewer:run
    - dials.refine = dials.command_line.refine:run
    - dials.refine_bravais_settings = dials.command_line.refine_bravais_settings:run
    - dials.refine_error_model = dials.command_line.refine_error_model:run
    - dials.reflection_viewer = dials.command_line.reflection_viewer:run
    - dials.reindex = dials.command_line.reindex:run
    - dials.report = dials.command_line.report:run
    - dials.rl_png = dials.command_line.rl_png:run
    - dials.rlv = dials.command_line.reciprocal_lattice_viewer:run
    - dials.rs_mapper = dials.command_line.rs_mapper:run
    - dials.scale = dials.command_line.scale:run
    - dials.search_beam_position = dials.command_line.search_beam_position:run
    - dials.sequence_to_stills = dials.command_line.sequence_to_stills:run
    - dials.shadow_plot = dials.command_line.shadow_plot:run
    - dials.show = dials.command_line.show:run
    - dials.slice_sequence = dials.command_line.slice_sequence:run
    - dials.sort_reflections = dials.command_line.sort_reflections:run
    - dials.split_experiments = dials.command_line.split_experiments:run
    - dials.spot_counts_per_image = dials.command_line.spot_counts_per_image:run
    - dials.spot_resolution_shells = dials.command_line.spot_resolution_shells:run
    - dials.stereographic_projection = dials.command_line.stereographic_projection:run
    - dials.stills_process = dials.command_line.stills_process:run
    - dials.symmetry = dials.command_line.symmetry:run
    - dials.two_theta_offset = dials.command_line.two_theta_offset:run
    - dials.two_theta_refine = dials.command_line.two_theta_refine:run
    - dials.unit_cell_histogram = dials.command_line.unit_cell_histogram:run
    - dials.version = dials.command_line.version:run
    # dxtbx
    - cxi.image2pickle = dxtbx.command_line.image2pickle:run
    - cxi.image_average = dxtbx.command_line.image_average:run
    - dev.dxtbx.debug_memory = dxtbx.command_line.debug_memory:run
    - dev.dxtbx.read_sequence = dxtbx.command_line.read_sequence:run
    - dxtbx.depends_on = dxtbx.command_line.depends_on:run
    - dxtbx.detector_superpose = dxtbx.command_line.detector_superpose:run
    - dxtbx.display_parallax_correction = dxtbx.command_line.display_parallax_correction:run
    - dxtbx.dlsnxs2cbf = dxtbx.command_line.dlsnxs2cbf:run
    - dxtbx.image2pickle = dxtbx.command_line.image2pickle:run
    - dxtbx.image_average = dxtbx.command_line.image_average:run
    - dxtbx.install_format = dxtbx.command_line.install_format:run
    - dxtbx.overload = dxtbx.command_line.overload:run
    - dxtbx.plot_detector_models = dxtbx.command_line.plot_detector_models:run
    - dxtbx.print_header = dxtbx.command_line.print_header:run
    - dxtbx.print_matching_images = dxtbx.command_line.print_matching_images:run
    - dxtbx.radial_average = dxtbx.command_line.radial_average:run
    - dxtbx.saturation = dxtbx.command_line.saturation:run
    - dxtbx.show_mask_info = dxtbx.command_line.show_mask_info:run
    - dxtbx.show_matching_formats = dxtbx.command_line.show_matching_formats:run
    - dxtbx.show_registry = dxtbx.command_line.show_registry:run
    # iota
    - iota = iota.command_line.iota_gui_launch:entry_point
    - iota.filter_pickles = iota.command_line.iota_filter_pickles:entry_point
    - iota.run = iota.command_line.iota_run:entry_point
    - iota.single_image = iota.command_line.iota_single_image:entry_point
    - iota.track_images = iota.command_line.iota_track_images:entry_point
    # xia2
    - dev.xia2.check_mosaic = xia2.cli.check_mosaic:run
    - dev.xia2.create_mask = xia2.cli.create_mask:run
    - dev.xia2.file_statistics = xia2.cli.file_statistics:run
    - dev.xia2.make_sphinx_html = xia2.cli.make_sphinx_html:run
    - dev.xia2.show_mask = xia2.cli.show_mask:run
    - dev.xia2.show_mtz_cells = xia2.cli.show_mtz_cells:run
    - xia2.add_free_set = xia2.cli.add_free_set:run
    - xia2.compare_merging_stats = xia2.cli.compare_merging_stats:run
    - xia2.delta_cc_half = xia2.cli.delta_cc_half:run
    - xia2.get_image_number = xia2.cli.get_image_number:run
    - xia2.html = xia2.cli.xia2_html:run_with_log
    - xia2.index = xia2.cli.index:run_with_log
    - xia2.integrate = xia2.cli.integrate:run_with_log
    - xia2.is_doing = xia2.cli.is_doing:main
    - xia2.ispyb_json = xia2.cli.ispyb_json:run
    - xia2.ispyb_xml = xia2.cli.ispyb_xml:run
    - xia2.merging_statistics = xia2.cli.merging_statistics:run
    - xia2.multi_crystal_analysis = xia2.cli.multi_crystal_analysis:run_with_log
    - xia2.multiplex = xia2.cli.multiplex:run
    - xia2.npp = xia2.cli.npp:run
    - xia2.overload = xia2.cli.overload:run
    - xia2.plot_multiplicity = xia2.cli.plot_multiplicity:run
    - xia2.print = xia2.cli.print:run_with_log
    - xia2.rebatch = xia2.cli.rebatch:run_with_log
    - xia2.report = xia2.cli.report:run_with_log
    - xia2.rescale = xia2.cli.rescale:run_with_log
    - xia2.setup = xia2.cli.setup:run
    - xia2.small_molecule = xia2.cli.small_molecule:run
    - xia2.strategy = xia2.cli.strategy:run_with_log
    - xia2.table1 = xia2.cli.table1:run
    - xia2.to_shelx = xia2.cli.to_shelx:run
    - xia2.to_shelxcde = xia2.cli.to_shelxcde:run
    - xia2 = xia2.cli.xia2_main:run

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - gnuconfig  # [unix]
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('libselinux') }}  # [linux]
    - {{ cdt('libxdamage') }}  # [linux]
    - {{ cdt('libxxf86vm') }}  # [linux]
    - {{ cdt('libxext') }}     # [linux]
  host:
    - boost
    - boost-cpp
    - eigen
    - future
    - hdf5
    - libglu  # [linux]
    - libtiff
    - msgpack-c
    - numpy
    - pip
    - procrunner
    - pybind11
    - python
    - python.app  # [osx]
    - scons
    - setuptools <60
    - six
    - wxpython
    - xorg-libxfixes  # [linux]

outputs:
  - name: cctbx.xfel
    requirements:
      run:
        - biopython
        - {{ pin_compatible('boost') }}
        - boost-cpp
        - future
        - h5py
        - {{ pin_compatible('hdf5') }}
        - hdf5plugin
        - {{ pin_compatible('libglu') }}  # [linux]
        - libsvm
        - matplotlib-base
        - mrcfile
        - msgpack-python
        - {{ pin_compatible('numpy') }}
        - orderedset
        - pandas
        - pillow
        - pint
        - procrunner
        - psutil
        - pycbf
        - python
        - python.app  # [osx]
        - reportlab
        - requests
        - scikit-learn
        - scipy
        - six
        - tabulate
        - tqdm
        - wxpython
        - mpi4py
        - mysql # [not win]
        - mysqlclient # [not win]
    test:
      imports:
        - scitbx.array_family.flex
        - gltbx.gl  # [not (win and py>=38)]
        - gltbx.glu  # [not (win and py>=38)]
      commands:
        - libtbx.show_commands
        - pip check
      requires:
        - pip

about:
  home: https://github.com/cctbx/cctbx_project
  license: BSD-3-Clause-LBNL AND BSD-3-Clause AND BSL-1.0 AND LGPL-2.0-only AND LGPL-2.1-only AND LGPL-3.0-only AND MIT AND LGPL-2.0-or-later WITH WxWindows-exception-3.1
  license_family: Other
  license_file:
    - ./licenses/LICENSE.txt
    - ./licenses/Boost_LICENSE_1_0.txt
    - ./licenses/bsd_3_clause.txt
    - ./licenses/gpl-3.0.txt
    - ./licenses/lgpl-2.0.txt
    - ./licenses/lgpl-2.1.txt
    - ./licenses/lgpl-3.0.txt
    - ./licenses/mit.txt
    - ./licenses/wxWindows_3.1.txt

  summary: The Computational Crystallography Toolbox
  description: |
    The Computational Crystallography Toolbox (cctbx) is being developed
    as the open source component of the Phenix system. The goal of the
    Phenix project is to advance automation of macromolecular structure
    determination. Phenix depends on the cctbx, but not vice versa. This
    hierarchical approach enforces a clean design as a reusable library.
    The cctbx is therefore also useful for small-molecule crystallography
    and even general scientific applications.
  doc_url: https://cctbx.github.io/
  dev_url: https://github.com/cctbx/cctbx_project

extra:
  recipe-maintainers:
    - bkpoon
    - phyy-nx
